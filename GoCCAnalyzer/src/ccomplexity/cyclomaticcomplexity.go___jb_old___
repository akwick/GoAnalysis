// The MIT License (MIT)

// Copyright (c) 2015-2016 Christian Bergum Bergersen

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Package 'graph' implements a data structure to represent directed graphs by
// node objects and unweight edges between nodes. Common graph operations
// like dept-first-search and detection of strongly connected components are
// provided.
package ccomplexity

import (
"go/token"
"go/parser"
	"fmt"
"github.com/chrisbbe/GoAnalysis/GoCCAnalyzer/src/graph"
"github.com/chrisbbe/GoAnalysis/GoCCAnalyzer/src/bblock"
)

// Here we must do something smart!


func GetCyclomaticComplexityForFile(sourceFile []byte) (int) {
	fileSet := token.NewFileSet() // positions are relative to fset
	file, err := parser.ParseFile(fileSet, "", sourceFile, 0)
	if err != nil {
		fmt.Errorf("Error parsing file %v\n", err)
	}

	controlFlowGraph := graph.NewGraph()

	for _, bb := range bblock.GetBasicBlocksFromSourceCode(file) {
		for _, bbS := range bb.Successor {
			controlFlowGraph.InsertEdge(&graph.Node{Value:bb}, &graph.Node{Value:bbS})
		}

	}
	return 0
}
